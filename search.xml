<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>深入认识 Scrapy框架中settings文件</title>
      <link href="2021/04/30/shen-ru-ren-shi-scrapy-zhong-settings-wen-jian/"/>
      <url>2021/04/30/shen-ru-ren-shi-scrapy-zhong-settings-wen-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="深入认识-Scrapy框架中settings文件"><a href="#深入认识-Scrapy框架中settings文件" class="headerlink" title="深入认识 Scrapy框架中settings文件"></a>深入认识 Scrapy框架中settings文件</h2><h3 id="为什么Scrapy项目中会存在settings文件呢，他到底是什么？"><a href="#为什么Scrapy项目中会存在settings文件呢，他到底是什么？" class="headerlink" title="为什么Scrapy项目中会存在settings文件呢，他到底是什么？"></a>为什么Scrapy项目中会存在settings文件呢，他到底是什么？</h3><ul><li>配置文件存放一些公共的变量（比如数据库的地址、账号+密码等），方便自己和别人修改</li><li>一般使用全大写字母命名变量名，例如 <code>LOG_LEVEL=&quot;WARN&quot;</code></li></ul><h2 id="settings文件详细解读"><a href="#settings文件详细解读" class="headerlink" title="settings文件详细解读"></a>settings文件详细解读</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">BOT_NAME &#x3D; &#39;Sun&#39;  # 项目名</span><br><span class="line"></span><br><span class="line">SPIDER_MODULES &#x3D; [&#39;Sun.spiders&#39;]  # 爬虫的位置</span><br><span class="line">NEWSPIDER_MODULE &#x3D; &#39;Sun.spiders&#39;  # 如果我们新建一个爬虫，这个新建爬虫的位置</span><br><span class="line"></span><br><span class="line">LOG_LEVEL&#x3D;&quot;WARN&quot;  # log日志显示的最低等级，只有等级大于或等于LOG_LEVEL的才会在终端中显示</span><br><span class="line"></span><br><span class="line"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span><br><span class="line">USER_AGENT &#x3D; &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;84.0.4147.89 Safari&#x2F;537.36&quot;</span><br><span class="line"># 浏览器的身份标识，即是&quot;User-Agent&quot;</span><br><span class="line"></span><br><span class="line"># Obey robots.txt rules</span><br><span class="line">ROBOTSTXT_OBEY &#x3D; True</span><br><span class="line"># 默认情况下为True，表示遵守这个网站的robots协议</span><br><span class="line"># 如果我们设置</span><br><span class="line"># ROBOTSTXT_OBEY &#x3D; True  # 不遵守robots协议</span><br><span class="line"># 遵守robots协议的体现：最开始请求url地址的时候会先请求对应的robots.txt，如果我们不遵守robots协议，就不会请求</span><br><span class="line"></span><br><span class="line"># Configure maximum concurrent requests performed by Scrapy (default: 16)</span><br><span class="line">#CONCURRENT_REQUESTS &#x3D; 32  # 设置最大并发请求</span><br><span class="line"># scrapy中封装了一个twisted异步网络框架，在发送网络请求的时候不会说等一个请求请求成功之后再去发送下一个请求，而是同时去发送很多个请求</span><br><span class="line"># 大概有多少个请求可以同时被发送呢？我们可以在这里自定义数量</span><br><span class="line"># 注意：默认是16个，我们可以根据自己的爬虫项目需要自定义CONCURRENT_REQUESTS的数量</span><br><span class="line"># CONCURRENT_REQUESTS的值越大，爬虫爬取的速度越快</span><br><span class="line"># 但是注意，CONCURRENT_REQUESTS的值越大，越有可能被对方的服务器识别为一个爬虫程序</span><br><span class="line"># 所以说，要适当设置CONCURRENT_REQUESTS的数量</span><br><span class="line"></span><br><span class="line">#DOWNLOAD_DELAY &#x3D; 3  # 下载延迟</span><br><span class="line"># 每次请求之前，休眠3秒</span><br><span class="line"># 可以让我们的爬虫请求速度变慢一些</span><br><span class="line"># The download delay setting will honor only one of:</span><br><span class="line"># 就是说我们的DOWNLOAD_DELAY参数可以配合着下面的CONCURRENT_REQUESTS_PER_DOMAIN参数和CONCURRENT_REQUESTS_PER_IP参数来使用</span><br><span class="line">#CONCURRENT_REQUESTS_PER_DOMAIN &#x3D; 16  # 每一个域名的最大并发请求数目</span><br><span class="line">#CONCURRENT_REQUESTS_PER_IP &#x3D; 16  # 每一个IP的最大并发请求数目</span><br><span class="line"></span><br><span class="line"># Disable cookies (enabled by default)</span><br><span class="line">#COOKIES_ENABLED &#x3D; False  # cookie是否开启</span><br><span class="line"># 默认情况下是开启的，也就是说我们请求完一个url地址之后，去请求下一个url地址的时候，scrapy默认是带上前一次请求对方服务器设置在我们本地的cookie信息</span><br><span class="line"># 很重要</span><br><span class="line"></span><br><span class="line"># Disable Telnet Console (enabled by default)</span><br><span class="line">#TELNETCONSOLE_ENABLED &#x3D; False</span><br><span class="line"># 这是我们scrapy框架的一个插件</span><br><span class="line"># 默认是开启的状态</span><br><span class="line"></span><br><span class="line"># Override the default request headers:</span><br><span class="line">#DEFAULT_REQUEST_HEADERS &#x3D; &#123;</span><br><span class="line">#   &#39;Accept&#39;: &#39;text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8&#39;,</span><br><span class="line">#   &#39;Accept-Language&#39;: &#39;en&#39;,</span><br><span class="line">#&#125;</span><br><span class="line"># 默认的请求头，默认是关闭的状态</span><br><span class="line"># 开启之后，scrapy就会用这个请求头去发送请求</span><br><span class="line"># 注意：如果我们将&quot;User-Agent&quot;参数放在这里，是没有任何效果的，因为专门有一个参数接收&quot;User-Agent&quot;对应的值</span><br><span class="line"></span><br><span class="line"># Enable or disable spider middlewares</span><br><span class="line"># See https:&#x2F;&#x2F;docs.scrapy.org&#x2F;en&#x2F;latest&#x2F;topics&#x2F;spider-middleware.html</span><br><span class="line"># SPIDER_MIDDLEWARES &#x3D; &#123;</span><br><span class="line">#    &#39;Sun.middlewares.SunSpiderMiddleware&#39;: 543,</span><br><span class="line"># &#125;</span><br><span class="line"># 爬虫中间件</span><br><span class="line"></span><br><span class="line"># Enable or disable downloader middlewares</span><br><span class="line"># See https:&#x2F;&#x2F;docs.scrapy.org&#x2F;en&#x2F;latest&#x2F;topics&#x2F;downloader-middleware.html</span><br><span class="line">#DOWNLOADER_MIDDLEWARES &#x3D; &#123;</span><br><span class="line">#    &#39;Sun.middlewares.SunDownloaderMiddleware&#39;: 543,</span><br><span class="line">#&#125;</span><br><span class="line"># 下载中间件</span><br><span class="line"></span><br><span class="line"># Enable or disable extensions</span><br><span class="line"># See https:&#x2F;&#x2F;docs.scrapy.org&#x2F;en&#x2F;latest&#x2F;topics&#x2F;extensions.html</span><br><span class="line">#EXTENSIONS &#x3D; &#123;</span><br><span class="line">#    &#39;scrapy.extensions.telnet.TelnetConsole&#39;: None,</span><br><span class="line">#&#125;</span><br><span class="line"># 插件</span><br><span class="line"></span><br><span class="line"># Configure item pipelines</span><br><span class="line"># See https:&#x2F;&#x2F;docs.scrapy.org&#x2F;en&#x2F;latest&#x2F;topics&#x2F;item-pipeline.html</span><br><span class="line">ITEM_PIPELINES &#x3D; &#123;</span><br><span class="line">   &#39;Sun.pipelines.SunPipeline&#39;: 300,</span><br><span class="line">&#125;</span><br><span class="line"># 管道</span><br><span class="line"></span><br><span class="line"># 爬虫中间件、下载中间件、插件、管道的使用方法：</span><br><span class="line"># 类似于ITEM_PIPELINES管道的使用方法</span><br><span class="line"># 开启之后，键--位置，值--和引擎之间的距离（注意：值越大，权重越低；值越小，权重越高）</span><br><span class="line"></span><br><span class="line"># Enable and configure the AutoThrottle extension (disabled by default)</span><br><span class="line"># See https:&#x2F;&#x2F;docs.scrapy.org&#x2F;en&#x2F;latest&#x2F;topics&#x2F;autothrottle.html</span><br><span class="line">#AUTOTHROTTLE_ENABLED &#x3D; True</span><br><span class="line"># AUTOTHROTTLE--自动限速</span><br><span class="line"># 比如说我们通过scrapy爬取对方的网站，可能会由于我们的scrapy爬虫速度太快导致把对方的网站“抓崩了”</span><br><span class="line"># “抓崩了”并不是我们想要的结果，因为“抓崩了”之后我们就没有办法再在对方的网站上爬取数据了</span><br><span class="line"># 我们可以根据对方网站的情况让我们的scrapy爬虫速度变慢一些</span><br><span class="line"># 通过调节下面的参数我们可以达到这个自动限速的目的</span><br><span class="line"># 但是往往我们是不需要这样操作的</span><br><span class="line"># The initial download delay</span><br><span class="line">#AUTOTHROTTLE_START_DELAY &#x3D; 5</span><br><span class="line"># The maximum download delay to be set in case of high latencies</span><br><span class="line">#AUTOTHROTTLE_MAX_DELAY &#x3D; 60</span><br><span class="line"># The average number of requests Scrapy should be sending in parallel to</span><br><span class="line"># each remote server</span><br><span class="line">#AUTOTHROTTLE_TARGET_CONCURRENCY &#x3D; 1.0</span><br><span class="line"># Enable showing throttling stats for every response received:</span><br><span class="line">#AUTOTHROTTLE_DEBUG &#x3D; False</span><br><span class="line"></span><br><span class="line"># Enable and configure HTTP caching (disabled by default)</span><br><span class="line"># 关于HTTP的缓存，默认是关闭的</span><br><span class="line"># See https:&#x2F;&#x2F;docs.scrapy.org&#x2F;en&#x2F;latest&#x2F;topics&#x2F;downloader-middleware.html#httpcache-middleware-settings</span><br><span class="line">#HTTPCACHE_ENABLED &#x3D; True</span><br><span class="line">#HTTPCACHE_EXPIRATION_SECS &#x3D; 0</span><br><span class="line">#HTTPCACHE_DIR &#x3D; &#39;httpcache&#39;</span><br><span class="line">#HTTPCACHE_IGNORE_HTTP_CODES &#x3D; []</span><br><span class="line">#HTTPCACHE_STORAGE &#x3D; &#39;scrapy.extensions.httpcache.FilesystemCacheStorage&#39;</span><br><span class="line"># 如果我们想要开启HTTP缓存就可以将其打开</span><br><span class="line"># 它会将我们的HTTP缓存至设置的位置，实现对应的功能</span><br><span class="line"># 不常用</span><br><span class="line"></span><br><span class="line"># 每一块内容都是有对应的官方文档的</span><br></pre></td></tr></table></figure><h2 id="如何在代码中使用我们在settings-py文件中所做的设置"><a href="#如何在代码中使用我们在settings-py文件中所做的设置" class="headerlink" title="如何在代码中使用我们在settings.py文件中所做的设置"></a><strong>如何在代码中使用我们在settings.py文件中所做的设置</strong></h2><p>现在，我们在<code>settings.py</code>文件中做了一些设置</p><p><a href="https://www.ipicbed.com/image/n4mz"><img src="https://www.ipicbed.com/images/2021/04/30/1.md.png" alt=" "></a></p><p><code>settings.py</code>文件中有一个<code>MONGO_HOST</code>，我们应该如何在spider中使用呢？</p><h3 id="第一种方法：导入"><a href="#第一种方法：导入" class="headerlink" title="第一种方法：导入"></a>第一种方法：导入</h3><p>1.导入</p><p>[<img src="https://www.ipicbed.com/image/n8n8" alt=" (https://www.ipicbed.com/images/2021/04/30/2.md.png)"></p><p>2.现在我们就可以使用我们在<code>settings.py</code>文件中定义的这个<code>MONGO_HOST</code>参数了</p><p>3.如果我们想要在其他文件中使用<code>MONGO_HOST</code>这个参数也是一样方法：导入</p><p>以<code> pipelines.py</code> 为例，</p><p><code>from .settings import MONGO_HOST</code></p><p><a href="https://www.ipicbed.com/image/ntWC"><img src="https://www.ipicbed.com/images/2021/04/30/3.md.png" alt="3.md.png"></a></p><h3 id="第二种方法：属性"><a href="#第二种方法：属性" class="headerlink" title="第二种方法：属性"></a>第二种方法：属性</h3><p>其实我们的spider本身就有一个属性就是settings</p><h4 id="1-如何在爬虫中使用settings属性"><a href="#1-如何在爬虫中使用settings属性" class="headerlink" title="1.如何在爬虫中使用settings属性"></a><strong>1.如何在爬虫中使用settings属性</strong></h4><p><a href="https://www.ipicbed.com/image/nYJE"><img src="https://www.ipicbed.com/images/2021/04/30/4.md.png" alt=" "></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import scrapy</span><br><span class="line">from ..items import SunItem</span><br><span class="line"># from ..settings import MONGO_HOST</span><br><span class="line"></span><br><span class="line">class SunSpider(scrapy.Spider):</span><br><span class="line">    name &#x3D; &#39;sun&#39;</span><br><span class="line">    allowed_domains &#x3D; [&#39;sun0769.com&#39;]</span><br><span class="line">    start_urls &#x3D; [&#39;http:&#x2F;&#x2F;wz.sun0769.com&#x2F;political&#x2F;index&#x2F;politicsNewest?id&#x3D;1&amp;page&#x3D;1&#39;]</span><br><span class="line"></span><br><span class="line">    def parse(self, response):</span><br><span class="line">        # # spider本身就有一个属性叫做settings</span><br><span class="line">        # self.settings[&quot;MONGO_HOST&quot;]  # self.settings是一个字典</span><br><span class="line">        # self.settings.get(&quot;MONGO_HOST&quot;,&quot;指定的MONGO_HOST的值&quot;)</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        由于self.settings是一个字典。所以我们可以对其使用</span><br><span class="line">        self.settings.get(&quot;MONGO_HOST&quot;)  # 如果MONGO_HOST不存在，返回的就是一个None值</span><br><span class="line">        # 或者是返回我们在get方法中给MONGO_HOST手动指定的值</span><br><span class="line">        self.settings.get(&quot;MONGO_HOST&quot;,&quot;指定的MONGO_HOST的值&quot;)</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        # 分组</span><br><span class="line">        li_list&#x3D;response.xpath(&#39;&#x2F;&#x2F;div[@class&#x3D;&quot;width-12&quot;]&#x2F;ul[@class&#x3D;&quot;title-state-ul&quot;]&#x2F;&#x2F;li[@class&#x3D;&quot;clear&quot;]&#39;)</span><br><span class="line">        for li in li_list:</span><br><span class="line">            item&#x3D;SunItem()</span><br><span class="line">            item[&quot;num&quot;]&#x3D;li.xpath(&#39;.&#x2F;&#x2F;span[@class&#x3D;&quot;state1&quot;]&#x2F;text()&#39;).extract_first()</span><br><span class="line">            item[&quot;title&quot;]&#x3D;li.xpath(&#39;.&#x2F;&#x2F;span[@class&#x3D;&quot;state3&quot;]&#x2F;a[1]&#x2F;text()&#39;).extract_first()</span><br><span class="line">            item[&quot;response_time&quot;]&#x3D;li.xpath(&#39;.&#x2F;&#x2F;span[@class&#x3D;&quot;state4&quot;]&#x2F;text()&#39;).extract_first().strip()</span><br><span class="line">            item[&quot;response_time&quot;]&#x3D;item[&quot;response_time&quot;].split(&quot;：&quot;)[-1]</span><br><span class="line">            item[&quot;ask_time&quot;]&#x3D;li.xpath(&#39;.&#x2F;&#x2F;span[@class&#x3D;&quot;state5 &quot;]&#x2F;text()&#39;).extract_first()</span><br><span class="line">            item[&quot;detail_url&quot;]&#x3D;&quot;http:&#x2F;&#x2F;wz.sun0769.com&quot;+li.xpath(&#39;.&#x2F;&#x2F;span[@class&#x3D;&quot;state3&quot;]&#x2F;a[1]&#x2F;@href&#39;).extract_first()</span><br><span class="line"></span><br><span class="line">            yield scrapy.Request(item[&quot;detail_url&quot;],</span><br><span class="line">                                 callback&#x3D;self.parse_detail_url,</span><br><span class="line">                                 meta&#x3D;&#123;&quot;item&quot;:item&#125;  # 通过meta传递数据</span><br><span class="line">                                 )</span><br><span class="line"></span><br><span class="line">        # 实现翻页操作</span><br><span class="line">        for page in range(2, 4):</span><br><span class="line">            next_url &#x3D; f&quot;http:&#x2F;&#x2F;wz.sun0769.com&#x2F;political&#x2F;index&#x2F;politicsNewest?id&#x3D;1&amp;page&#x3D;&#123;page&#125;&quot;</span><br><span class="line">            yield scrapy.Request(next_url,</span><br><span class="line">                                 callback&#x3D;self.parse</span><br><span class="line">                                 )</span><br><span class="line"></span><br><span class="line">    def parse_detail_url(self,response):</span><br><span class="line">        &quot;&quot;&quot;处理详情页的数据&quot;&quot;&quot;</span><br><span class="line">        item&#x3D;response.meta[&quot;item&quot;]  # 取出数据</span><br><span class="line"></span><br><span class="line">        # 注意：这样获得的内容是混杂的，包含了很多的占位符等垃圾符号</span><br><span class="line">        item[&quot;content&quot;]&#x3D;response.xpath(&#39;&#x2F;&#x2F;div[@class&#x3D;&quot;details-box&quot;]&#x2F;pre&#x2F;text()&#39;).extract_first()</span><br><span class="line"></span><br><span class="line">        # 注意：图片和视频可能不止一个，也可能没有</span><br><span class="line">        item[&quot;img&quot;]&#x3D;response.xpath(&#39;&#x2F;&#x2F;div[@class&#x3D;&quot;clear details-img-list Picture-img&quot;]&#x2F;img&#x2F;@src&#39;).extract()</span><br><span class="line">        item[&quot;video&quot;]&#x3D;response.xpath(&#39;&#x2F;&#x2F;div[@class&#x3D;&quot;vcp-player&quot;]&#x2F;video&#x2F;@src&#39;).extract()</span><br><span class="line"></span><br><span class="line">        yield item</span><br></pre></td></tr></table></figure><h4 id="2-如何在其他文件中使用settings属性"><a href="#2-如何在其他文件中使用settings属性" class="headerlink" title="2.如何在其他文件中使用settings属性"></a><strong>2.如何在其他文件中使用settings属性</strong></h4><blockquote><p><em>以pipelines.py为例</em></p><p><a href="https://www.ipicbed.com/image/nf3N"><img src="https://www.ipicbed.com/images/2021/04/30/5.md.png" alt=" "></a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line"># Define your item pipelines here</span><br><span class="line">#</span><br><span class="line"># Don&#39;t forget to add your pipeline to the ITEM_PIPELINES setting</span><br><span class="line"># See: https:&#x2F;&#x2F;docs.scrapy.org&#x2F;en&#x2F;latest&#x2F;topics&#x2F;item-pipeline.html</span><br><span class="line"></span><br><span class="line">import logging</span><br><span class="line"># from .settings import MONGO_HOST</span><br><span class="line"></span><br><span class="line">logger&#x3D;logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line">class SunPipeline:</span><br><span class="line">    def process_item(self, item, spider):</span><br><span class="line">        # spider.settings</span><br><span class="line">        # spider.settings就是self.settings</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        spider.settings[&quot;MONGO_HOST&quot;]</span><br><span class="line">        spider.settings.get(&quot;MONGO_HOST&quot;,&quot;指定的MONGO_HOST的值&quot;)</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        item[&quot;content&quot;]&#x3D;self.process_content(item[&quot;content&quot;])</span><br><span class="line">        # logger.warning(item)</span><br><span class="line">        return item</span><br><span class="line"></span><br><span class="line">    def process_content(self,content):</span><br><span class="line">        &quot;&quot;&quot;处理item中的字符串&quot;&quot;&quot;</span><br><span class="line">        new_content&#x3D;content.replace(&quot;\r\n&quot;,&quot;&quot;).replace(&quot;\xa0&quot;,&quot;&quot;)</span><br><span class="line">        return new_content</span><br></pre></td></tr></table></figure><p><strong>scrapy深入之pipeline的使用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class JsonWriterPipeline(object):</span><br><span class="line">    def open(self,spider):</span><br><span class="line">        &quot;&quot;&quot;在爬虫开启的时候执行，仅执行一次&quot;&quot;&quot;</span><br><span class="line">        self.file&#x3D;open(spider.setting.get(&quot;SAVE_FILE&quot;,&quot;.&#x2F;temp.json&quot;),&quot;w&quot;)</span><br><span class="line">    </span><br><span class="line">    def close(self,spider):</span><br><span class="line">        &quot;&quot;&quot;在爬虫关闭的时候执行，仅执行一次&quot;&quot;&quot;</span><br><span class="line">        self.file.close()</span><br><span class="line">    </span><br><span class="line">    def process_item(self,item,spider):</span><br><span class="line">        line&#x3D;json.dumps(dict(item))+&quot;\n&quot;  # 将字典转化为json字符串</span><br><span class="line">        self.file.write(line)</span><br><span class="line">        return item  # 如果不return的情况下，另一个权重较低的pipeline就不会获取到该item</span><br></pre></td></tr></table></figure><ul><li><code>open_spider</code>在爬虫开启的时候执行一次</li><li><code>close_spider</code>在爬虫关闭的时候执行一次</li></ul><p><strong>好处1：数据库的处理：</strong></p><ul><li>建立连接的过程就可以放在<code>open_spider</code>中</li><li>断开连接的过程就放在<code>close_spider</code>中</li></ul><p><strong>好处2：在爬虫开始时为爬虫添加一些属性</strong></p><ol><li><p>在爬虫开始的时候为爬虫添加了一个新的属性<code>hello</code>，值为<code>&quot;world&quot;</code></p><p>位置：<code>pipelines.SunPipeline</code></p></li></ol><p><a href="https://www.ipicbed.com/image/nQfu"><img src="https://www.ipicbed.com/images/2021/04/30/6.md.png" alt=" "></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def open_spider(self,spider):</span><br><span class="line">        spider.hello&#x3D;&quot;world&quot;  # 为spider创建一个新的属性叫做&quot;hello&quot;，值为&quot;world&quot;</span><br></pre></td></tr></table></figure><ol><li>在爬虫中调用这个属性</li></ol><p><a href="https://www.ipicbed.com/image/npoT"><img src="https://www.ipicbed.com/images/2021/04/30/7.md.png" alt=" "></a></p><p>注意：现在我们至是想要看见<code>scrapy</code>在爬虫启动的时候是否执行了open_spider这个方法，不需要爬取网站的信息，所以我们修改爬取的范围，即是 <code>allowed_domains</code></p><ol start="2"><li>启动我们的爬虫程序</li></ol><p><code>scrapy crawl sun</code></p><p><a href="https://www.ipicbed.com/image/nq1b"><img src="https://www.ipicbed.com/images/2021/04/30/8.md.png" alt=" "></a></p><p>发现确实是输出了<code>hello</code>属性对应的值，说明我们的爬虫在开始的时候的确是调用了open_spider这个函数</p><h2 id="pipeline中对数据库的处理"><a href="#pipeline中对数据库的处理" class="headerlink" title="pipeline中对数据库的处理"></a><strong>pipeline中对数据库的处理</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 对数据库进行处理</span><br><span class="line">from pymongo import MongoClient</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class SunPipeline:</span><br><span class="line">    def open_spider(self,spider):</span><br><span class="line">        client&#x3D;MongoClient()  # 实例化一下client</span><br><span class="line">        self.collection&#x3D;client[&quot;test&quot;][&quot;test&quot;]</span><br><span class="line"></span><br><span class="line">    def process_item(self, item, spider):</span><br><span class="line">        # 调用self.collection，直接insert</span><br><span class="line">        self.collection.insert(dict(item))</span><br></pre></td></tr></table></figure><p><strong>当我们需要把文件写在本地的时候</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class JsonWriterPipeline(object):</span><br><span class="line">    def open(self,spider):</span><br><span class="line">        &quot;&quot;&quot;在爬虫开启的时候执行，仅执行一次&quot;&quot;&quot;</span><br><span class="line">        self.file&#x3D;open(spider.setting.get(&quot;SAVE_FILE&quot;,&quot;.&#x2F;temp.json&quot;),&quot;w&quot;)</span><br><span class="line">    </span><br><span class="line">    def close(self,spider):</span><br><span class="line">        &quot;&quot;&quot;在爬虫关闭的时候执行，仅执行一次&quot;&quot;&quot;</span><br><span class="line">        self.file.close()</span><br><span class="line">    </span><br><span class="line">    def process_item(self,item,spider):</span><br><span class="line">        line&#x3D;json.dumps(dict(item))+&quot;\n&quot;  # 将字典转化为json字符串</span><br><span class="line">        self.file.write(line)</span><br><span class="line">        return item  # 如果不return的情况下，另一个权重较低的pipeline就不会获取到该item</span><br></pre></td></tr></table></figure><p><strong>思路：</strong></p><ul><li>在<code>open_spider</code>中打开一次</li><li>在<code>close_spider</code>中关闭一次</li><li>中间不停地往文件中写入数据</li></ul><p>这种方式是可以的，但是会有问题</p><p><strong>问题：</strong></p><p>如果我们的爬虫在爬取网站的时候爬取到第3页的时候程序突然报错了，然后爬虫终止执行，这时候，前2页的数据能够保存在我们的文件中吗？</p><p><strong>不会</strong></p><p><strong>为什么？</strong></p><p>因为我们的文件打开之后写入数据只有在close之后数据才会写进去，如果我们不close的话，数据是不会写入的。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scrapy </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
